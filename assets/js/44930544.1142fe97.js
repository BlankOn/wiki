"use strict";(self.webpackChunkdocusaurus_wiki=self.webpackChunkdocusaurus_wiki||[]).push([[34599],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return b}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=l(t),b=a,f=c["".concat(s,".").concat(b)]||c[b]||p[b]||i;return t?r.createElement(f,u(u({ref:n},d),{},{components:t})):r.createElement(f,u({ref:n},d))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,u=new Array(i);u[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,u[1]=o;for(var l=2;l<i;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},63732:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),u=["components"],o={},s="PanduanPbuilderMultiARCH",l={unversionedId:"TimPengembang/Pemaket/PanduanPbuilderMultiARCH",id:"TimPengembang/Pemaket/PanduanPbuilderMultiARCH",title:"PanduanPbuilderMultiARCH",description:"Membangun Paket di lingkungan Pbuilder",source:"@site/wiki/TimPengembang/Pemaket/PanduanPbuilderMultiARCH.md",sourceDirName:"TimPengembang/Pemaket",slug:"/TimPengembang/Pemaket/PanduanPbuilderMultiARCH",permalink:"/TimPengembang/Pemaket/PanduanPbuilderMultiARCH",draft:!1,editUrl:"https://github.com/BlankOn/wiki/edit/master/wiki/TimPengembang/Pemaket/PanduanPbuilderMultiARCH.md",tags:[],version:"current",frontMatter:{}},d={},p=[{value:"Membangun Paket di lingkungan Pbuilder",id:"membangun-paket-di-lingkungan-pbuilder",level:3},{value:"Ubah konfigurasi sudo",id:"ubah-konfigurasi-sudo",level:4},{value:"Berkas konfigurasi pbuilder",id:"berkas-konfigurasi-pbuilder",level:4},{value:"Buat pbuilder base",id:"buat-pbuilder-base",level:4},{value:"Update base",id:"update-base",level:4},{value:"Bangun paket",id:"bangun-paket",level:4}],c={toc:p};function b(e){var n=e.components,t=(0,a.Z)(e,u);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"panduanpbuildermultiarch"},"PanduanPbuilderMultiARCH"),(0,i.kt)("h3",{id:"membangun-paket-di-lingkungan-pbuilder"},"Membangun Paket di lingkungan Pbuilder"),(0,i.kt)("p",null,"sudo apt-get install devscripts build-essential fakeroot debhelper gnupg\npbuilder pdebuild-cross dh-make dpkg-dev ubuntu-dev-tools qemu-user-static\ngnome-pkg-tools dh-autoreconf"),(0,i.kt)("h4",{id:"ubah-konfigurasi-sudo"},"Ubah konfigurasi sudo"),(0,i.kt)("p",null,'Defaults        env_reset\nmenjadi\nDefaults        env_reset,env_keep="DIST ARCH"\nTambahkan di konfigurasi sudo\nCmnd_Alias  PBUILDER = /usr/sbin/pbuilder, /usr/bin/pdebuild, /usr/bin/debuild-\npbuilder'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<your user>  ALL=(ALL) SETENV: NOPASSWD: PBUILDER\n")),(0,i.kt)("h4",{id:"berkas-konfigurasi-pbuilder"},"Berkas konfigurasi pbuilder"),(0,i.kt)("p",null,"sudo vim /etc/pbuilderrc"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# Codenames for Debian suites according to their alias. Update these when\n# needed.\nUNSTABLE_CODENAME="sid"\nTESTING_CODENAME="jessie"\nSTABLE_CODENAME="wheezy"\nSTABLE_BACKPORTS_SUITE="$STABLE_CODENAME-backports"\nDEBOOTSTRAPOPTS=(\'--keyring\' \'/usr/share/keyrings/blankon-archive-keyring.gpg\')\n# List of Debian suites.\nDEBIAN_SUITES=($UNSTABLE_CODENAME $TESTING_CODENAME $STABLE_CODENAME\n    "unstable" "testing" "stable")\n# List of Ubuntu suites. Update these when needed.\nBLANKON_SUITES=("experimental" "tambora" "suroboyo")\n# Mirrors to use. Update these to your preferred mirror.\nDEBIAN_MIRROR="ftp.us.debian.org"\nBLANKON_MIRROR="arsip-dev.blankonlinux.or.id"\n# Optionally use the changelog of a package to determine the suite to use if\n# none set.\nif [ -z "${DIST}" ] && [ -r "debian/changelog" ]; then\n    DIST=$(dpkg-parsechangelog | awk \'/^Distribution: / {print $2}\')\n    DIST="${DIST%%-*}"\n    # Use the unstable suite for certain suite values.\n    if $(echo "experimental UNRELEASED" | grep -q $DIST); then\n        DIST="$UNSTABLE_CODENAME"\n    fi\nfi\n# Optionally set a default distribution if none is used. Note that you can set\n# your own default (i.e. ${DIST:="unstable"}).\n: ${DIST:="$(lsb_release --short --codename)"}\n# Optionally change Debian release states in $DIST to their names.\ncase "$DIST" in\n    unstable)\n        DIST="$UNSTABLE_CODENAME"\n        ;;\n    testing)\n        DIST="$TESTING_CODENAME"\n        ;;\n    stable)\n        DIST="$STABLE_CODENAME"\n        ;;\nesac\n# Optionally set the architecture to the host architecture if none set. Note\n# that you can set your own default (i.e. ${ARCH:="i386"}).\n: ${ARCH:="$(dpkg --print-architecture)"}\nNAME="$DIST"\nif [ -n "${ARCH}" ]; then\n    NAME="$NAME-$ARCH"\n    DEBOOTSTRAPOPTS=("--arch" "$ARCH" "${DEBOOTSTRAPOPTS[@]}")\nfi\nif [ "$ARCH" == "armel" ] && [ "$(dpkg --print-architecture)" != "armel" ];\nthen\n    DEBOOTSTRAP="qemu-debootstrap"\nfi\nif [ "$ARCH" == "armhf" ] && [ "$(dpkg --print-architecture)" != "armhf" ];\nthen\n    DEBOOTSTRAP="qemu-debootstrap"\nfi\nBASETGZ="/home/$USER/pbuilder/$NAME-base.tgz"\nDISTRIBUTION="$DIST"\nBUILDRESULT="/home/$USER/pbuilder/$NAME/result/"\nAPTCACHE="/home/$USER/pbuilder/$NAME/aptcache/"\nBUILDPLACE="/home/$USER/pbuilder/build/"\nDEBBUILDOPTS="-I -i -j9"\n# Optionally set the CONCURRENCY_LEVEL to specifies the number of allowed\n# concurrent jobs for make while building the package.\n# Default is cores-1.\n: ${CCL:="$(grep -cE "^processor" /proc/cpuinfo)"}\nif [ "${CCL}" -eq "1" ]; then\n    CONCURRENCY_LEVEL=${CCL}\nelse\n    CONCURRENCY_LEVEL=$((${CCL}-1))\nfi\n# export the three variables\nexport DIST\nexport ARCH\nexport CONCURRENCY_LEVEL\n#echo architecture: $ARCH\n#echo distribution: $DIST\n#echo used cpus:    $CONCURRENCY_LEVEL\n# Option to pass to apt-get always.\nexport APTGETOPT=(--force-yes)\n# Option to pass to aptitude always.\nexport APTITUDEOPT=(--force-yes)\n# make debconf not interact with user\nexport DEBIAN_FRONTEND="noninteractive"\n# SHELL variable is used inside pbuilder by commands like \'su\'; and they need\nsane values\n#export SHELL=/bin/bash\nif $(echo ${DEBIAN_SUITES[@]} | grep -q $DIST); then\n    # Debian configuration\n    MIRRORSITE="http://$DEBIAN_MIRROR/debian/"\n    COMPONENTS="main contrib non-free"\n    DEBOOTSTRAPOPTS=("${DEBOOTSTRAPOPTS[@]}" "--keyring=/usr/share/keyrings/\ndebian-archive-keyring.gpg")\nelif $(echo ${BLANKON_SUITES[@]} | grep -q $DIST); then\n    # BlankOn configuration\n    MIRRORSITE="http://$BLANKON_MIRROR/blankon/"\n    COMPONENTS="main extras restricted extras-restricted"\n    DEBOOTSTRAPOPTS=("${DEBOOTSTRAPOPTS[@]}" "--keyring=/usr/share/keyrings/\nblankon-archive-keyring.gpg")\nelse\n    echo "Unknown distribution: $DIST"\n    exit 1\nfi\n# info output\necho "I: Used distribution is ${DIST}."\necho "I: Build architecture is ${ARCH}."\necho "I: Used cpus for building: ${CONCURRENCY_LEVEL}."\n')),(0,i.kt)("h4",{id:"buat-pbuilder-base"},"Buat pbuilder base"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo DIST=tambora ARCH=amd64 pbuilder create\n")),(0,i.kt)("p",null,"atau armhf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo DIST=tambora ARCH=armhf pbuilder create\n")),(0,i.kt)("h4",{id:"update-base"},"Update base"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo DIST=tambora ARCH=amd64 pbuilder update --override-config\n")),(0,i.kt)("h4",{id:"bangun-paket"},"Bangun paket"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo DIST=tambora ARCH=amd64 pbuilder build nama-paket.dsc\n")))}b.isMDXComponent=!0}}]);