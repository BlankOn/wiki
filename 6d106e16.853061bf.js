(window.webpackJsonp=window.webpackJsonp||[]).push([[413],{1047:function(e,n,t){"use strict";t.d(n,"a",(function(){return b}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),l=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),b=r,O=d["".concat(o,".").concat(b)]||d[b]||p[b]||i;return t?a.a.createElement(O,u(u({ref:n},c),{},{components:t})):a.a.createElement(O,u({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var c=2;c<i;c++)o[c]=t[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},480:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return l}));var r=t(3),a=t(7),i=(t(0),t(1047)),o={},u={unversionedId:"TimPengembang/Pemaket/PanduanPbuilderMultiARCH",id:"TimPengembang/Pemaket/PanduanPbuilderMultiARCH",isDocsHomePage:!1,title:"PanduanPbuilderMultiARCH",description:"PanduanPbuilderMultiARCH",source:"@site/Wiki/TimPengembang/Pemaket/PanduanPbuilderMultiARCH.md",slug:"/TimPengembang/Pemaket/PanduanPbuilderMultiARCH",permalink:"/TimPengembang/Pemaket/PanduanPbuilderMultiARCH",editUrl:"https://github.com/BlankOn/wiki/edit/master/Wiki/TimPengembang/Pemaket/PanduanPbuilderMultiARCH.md",version:"current"},s=[{value:"Membangun Paket di lingkungan Pbuilder",id:"membangun-paket-di-lingkungan-pbuilder",children:[]}],c={rightToc:s};function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.a)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.a)("h1",{id:"panduanpbuildermultiarch"},"PanduanPbuilderMultiARCH"),Object(i.a)("h3",{id:"membangun-paket-di-lingkungan-pbuilder"},"Membangun Paket di lingkungan Pbuilder"),Object(i.a)("p",null,"sudo apt-get install devscripts build-essential fakeroot debhelper gnupg\npbuilder pdebuild-cross dh-make dpkg-dev ubuntu-dev-tools qemu-user-static\ngnome-pkg-tools dh-autoreconf"),Object(i.a)("h4",{id:"ubah-konfigurasi-sudo"},"Ubah konfigurasi sudo"),Object(i.a)("p",null,'Defaults        env_reset\nmenjadi\nDefaults        env_reset,env_keep="DIST ARCH"\nTambahkan di konfigurasi sudo\nCmnd_Alias  PBUILDER = /usr/sbin/pbuilder, /usr/bin/pdebuild, /usr/bin/debuild-\npbuilder'),Object(i.a)("pre",null,Object(i.a)("code",Object(r.a)({parentName:"pre"},{}),"<your user>  ALL=(ALL) SETENV: NOPASSWD: PBUILDER\n")),Object(i.a)("h4",{id:"berkas-konfigurasi-pbuilder"},"Berkas konfigurasi pbuilder"),Object(i.a)("p",null,"sudo vim /etc/pbuilderrc"),Object(i.a)("pre",null,Object(i.a)("code",Object(r.a)({parentName:"pre"},{}),'# Codenames for Debian suites according to their alias. Update these when\n# needed.\nUNSTABLE_CODENAME="sid"\nTESTING_CODENAME="jessie"\nSTABLE_CODENAME="wheezy"\nSTABLE_BACKPORTS_SUITE="$STABLE_CODENAME-backports"\nDEBOOTSTRAPOPTS=(\'--keyring\' \'/usr/share/keyrings/blankon-archive-keyring.gpg\')\n# List of Debian suites.\nDEBIAN_SUITES=($UNSTABLE_CODENAME $TESTING_CODENAME $STABLE_CODENAME\n    "unstable" "testing" "stable")\n# List of Ubuntu suites. Update these when needed.\nBLANKON_SUITES=("experimental" "tambora" "suroboyo")\n# Mirrors to use. Update these to your preferred mirror.\nDEBIAN_MIRROR="ftp.us.debian.org"\nBLANKON_MIRROR="arsip-dev.blankonlinux.or.id"\n# Optionally use the changelog of a package to determine the suite to use if\n# none set.\nif [ -z "${DIST}" ] && [ -r "debian/changelog" ]; then\n    DIST=$(dpkg-parsechangelog | awk \'/^Distribution: / {print $2}\')\n    DIST="${DIST%%-*}"\n    # Use the unstable suite for certain suite values.\n    if $(echo "experimental UNRELEASED" | grep -q $DIST); then\n        DIST="$UNSTABLE_CODENAME"\n    fi\nfi\n# Optionally set a default distribution if none is used. Note that you can set\n# your own default (i.e. ${DIST:="unstable"}).\n: ${DIST:="$(lsb_release --short --codename)"}\n# Optionally change Debian release states in $DIST to their names.\ncase "$DIST" in\n    unstable)\n        DIST="$UNSTABLE_CODENAME"\n        ;;\n    testing)\n        DIST="$TESTING_CODENAME"\n        ;;\n    stable)\n        DIST="$STABLE_CODENAME"\n        ;;\nesac\n# Optionally set the architecture to the host architecture if none set. Note\n# that you can set your own default (i.e. ${ARCH:="i386"}).\n: ${ARCH:="$(dpkg --print-architecture)"}\nNAME="$DIST"\nif [ -n "${ARCH}" ]; then\n    NAME="$NAME-$ARCH"\n    DEBOOTSTRAPOPTS=("--arch" "$ARCH" "${DEBOOTSTRAPOPTS[@]}")\nfi\nif [ "$ARCH" == "armel" ] && [ "$(dpkg --print-architecture)" != "armel" ];\nthen\n    DEBOOTSTRAP="qemu-debootstrap"\nfi\nif [ "$ARCH" == "armhf" ] && [ "$(dpkg --print-architecture)" != "armhf" ];\nthen\n    DEBOOTSTRAP="qemu-debootstrap"\nfi\nBASETGZ="/home/$USER/pbuilder/$NAME-base.tgz"\nDISTRIBUTION="$DIST"\nBUILDRESULT="/home/$USER/pbuilder/$NAME/result/"\nAPTCACHE="/home/$USER/pbuilder/$NAME/aptcache/"\nBUILDPLACE="/home/$USER/pbuilder/build/"\nDEBBUILDOPTS="-I -i -j9"\n# Optionally set the CONCURRENCY_LEVEL to specifies the number of allowed\n# concurrent jobs for make while building the package.\n# Default is cores-1.\n: ${CCL:="$(grep -cE "^processor" /proc/cpuinfo)"}\nif [ "${CCL}" -eq "1" ]; then\n    CONCURRENCY_LEVEL=${CCL}\nelse\n    CONCURRENCY_LEVEL=$((${CCL}-1))\nfi\n# export the three variables\nexport DIST\nexport ARCH\nexport CONCURRENCY_LEVEL\n#echo architecture: $ARCH\n#echo distribution: $DIST\n#echo used cpus:    $CONCURRENCY_LEVEL\n# Option to pass to apt-get always.\nexport APTGETOPT=(--force-yes)\n# Option to pass to aptitude always.\nexport APTITUDEOPT=(--force-yes)\n# make debconf not interact with user\nexport DEBIAN_FRONTEND="noninteractive"\n# SHELL variable is used inside pbuilder by commands like \'su\'; and they need\nsane values\n#export SHELL=/bin/bash\nif $(echo ${DEBIAN_SUITES[@]} | grep -q $DIST); then\n    # Debian configuration\n    MIRRORSITE="http://$DEBIAN_MIRROR/debian/"\n    COMPONENTS="main contrib non-free"\n    DEBOOTSTRAPOPTS=("${DEBOOTSTRAPOPTS[@]}" "--keyring=/usr/share/keyrings/\ndebian-archive-keyring.gpg")\nelif $(echo ${BLANKON_SUITES[@]} | grep -q $DIST); then\n    # BlankOn configuration\n    MIRRORSITE="http://$BLANKON_MIRROR/blankon/"\n    COMPONENTS="main extras restricted extras-restricted"\n    DEBOOTSTRAPOPTS=("${DEBOOTSTRAPOPTS[@]}" "--keyring=/usr/share/keyrings/\nblankon-archive-keyring.gpg")\nelse\n    echo "Unknown distribution: $DIST"\n    exit 1\nfi\n# info output\necho "I: Used distribution is ${DIST}."\necho "I: Build architecture is ${ARCH}."\necho "I: Used cpus for building: ${CONCURRENCY_LEVEL}."\n')),Object(i.a)("h4",{id:"buat-pbuilder-base"},"Buat pbuilder base"),Object(i.a)("pre",null,Object(i.a)("code",Object(r.a)({parentName:"pre"},{}),"sudo DIST=tambora ARCH=amd64 pbuilder create\n")),Object(i.a)("p",null,"atau armhf"),Object(i.a)("pre",null,Object(i.a)("code",Object(r.a)({parentName:"pre"},{}),"sudo DIST=tambora ARCH=armhf pbuilder create\n")),Object(i.a)("h4",{id:"update-base"},"Update base"),Object(i.a)("pre",null,Object(i.a)("code",Object(r.a)({parentName:"pre"},{}),"sudo DIST=tambora ARCH=amd64 pbuilder update --override-config\n")),Object(i.a)("h4",{id:"bangun-paket"},"Bangun paket"),Object(i.a)("pre",null,Object(i.a)("code",Object(r.a)({parentName:"pre"},{}),"sudo DIST=tambora ARCH=amd64 pbuilder build nama-paket.dsc\n")))}l.isMDXComponent=!0}}]);